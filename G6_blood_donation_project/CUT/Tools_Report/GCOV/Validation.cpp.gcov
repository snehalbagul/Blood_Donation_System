        -:    0:Source:Validation.cpp
        -:    0:Graph:main.gcno
        -:    0:Data:main.gcda
        -:    0:Runs:1
        -:    1:/******************************************************************************************************************
        -:    2: *
        -:    3: ** FUNCTION NAME    :       Validation
        -:    4: **
        -:    5: ** DESCRIPTION      :
        -:    6: **
        -:    7: **
        -:    8: ** RETURNS          :       
        -:    9: **
        -:   10: **
        -:   11: ******************************************************************************************************************/
        -:   12:
        -:   13:#include<iostream>
        -:   14:#include<iomanip>
        -:   15:#include<string>
        -:   16:using namespace std;
        -:   17:
        -:   18:// aadhar validation
        -:   19:
        -:   20:
function _Z17aadhar_validationNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 6 returned 100% blocks executed 28%
        6:   21:bool aadhar_validation(string aadhar_num)
        -:   22:{
        -:   23:        
        -:   24:	try
        -:   25:	{
       42:   26:	for(int i=0;i<aadhar_num.length();i++)
call    0 returned 42
branch  1 taken 36 (fallthrough)
branch  2 taken 6
        -:   27:	{
       36:   28:	              if(isdigit(aadhar_num[i])!=1)
call    0 returned 36
branch  1 taken 36 (fallthrough)
branch  2 taken 0 (throw)
branch  3 taken 0 (fallthrough)
branch  4 taken 36
    #####:   29:				throw aadhar_num;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:   30:		
        -:   31:	}
        -:   32:	}
    =====:   33:		catch(string a)
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
        -:   34:		{
    =====:   35:			cout<<"Aadhar number should be only in digits."<<endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    =====:   36:			return false;
call    0 never executed
        -:   37:		}
        -:   38:
        -:   39:        try
        -:   40:	{
        -:   41:
        6:   42:	if(aadhar_num.length()!=6)
call    0 returned 6
branch  1 taken 0 (fallthrough)
branch  2 taken 6
    #####:   43:		throw aadhar_num;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:   44:	}
    =====:   45:	catch(string a)
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
        -:   46:	
        -:   47:	{
    =====:   48:		cout<<"Aadhar number should be of 6 digits only."<<endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    =====:   49:		return false;
call    0 never executed
        -:   50:	}
        -:   51:	
        -:   52:	try
        -:   53:	{
       11:   54:	for(auto it:l)
call    0 returned 6
call    1 returned 6
call    2 returned 11
branch  3 taken 5 (fallthrough)
branch  4 taken 6
call    5 returned 5
call    6 returned 5
branch  7 taken 5 (fallthrough)
branch  8 taken 0 (throw)
call    9 returned 5
call   10 returned 5
call   11 never executed
        -:   55:	{
        -:   56:	
        -:   57:		
        -:   58:
        5:   59:		if(it.get_aadhar_num()==aadhar_num)
call    0 returned 5
branch  1 taken 5 (fallthrough)
branch  2 taken 0 (throw)
call    3 returned 5
call    4 returned 5
branch  5 taken 0 (fallthrough)
branch  6 taken 5
    #####:   60:			throw aadhar_num;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:   61:		}
        -:   62:	}
    =====:   63:		catch(string a)
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
        -:   64:		{
    =====:   65:			cout<<"Aadhar number should not be duplicate."<<endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    =====:   66:			return false;
call    0 never executed
        -:   67:		}
        -:   68:	
        6:   69:	return true;
        -:   70:}
        -:   71:
        -:   72:// name validation
function _Z15name_validationNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 7 returned 100% blocks executed 28%
        7:   73:bool name_validation(string name)
        -:   74:{
        -:   75:	//transform(name.begin(),name.end(),name.begin(), ::toupper);
        -:   76:        try
        -:   77:	{
       47:   78:	for(int i=0;i<name.length();i++)
call    0 returned 47
branch  1 taken 40 (fallthrough)
branch  2 taken 7
        -:   79:	{
        -:   80:	
       40:   81:		if(isalpha(name[i])==0)
call    0 returned 40
branch  1 taken 40 (fallthrough)
branch  2 taken 0 (throw)
branch  3 taken 0 (fallthrough)
branch  4 taken 40
    #####:   82:			throw name;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:   83:		}
        -:   84:	}
    =====:   85:		catch(string a)
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
        -:   86:		{
    =====:   87:			cout<<"Name should be in only alphabets(A-Z)."<<endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    =====:   88:			return false;
call    0 never executed
        -:   89:		}
        -:   90:	
        -:   91:	try
        -:   92:	{
        -:   93:
       7*:   94:	if(name.length()>20||name.length()<3)
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0
call    3 returned 7
branch  4 taken 0 (fallthrough)
branch  5 taken 7
branch  6 taken 0 (fallthrough)
branch  7 taken 7
    #####:   95:		throw name;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:   96:	}
    =====:   97:	catch(string a)
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
        -:   98:	{
    =====:   99:		cout<<"Name should be maximum 20 characters. and min 5 characters"<<endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    =====:  100:		return false;
call    0 never executed
        -:  101:	}
        -:  102:	
        7:  103:		return true;
        -:  104:}   
        -:  105:
        -:  106:
        -:  107:// address validation
function _Z18address_validationNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 7 returned 100% blocks executed 25%
        7:  108:bool address_validation(string address)
        -:  109:{
        7:  110:	int length=address.length();
call    0 returned 7
        -:  111:	try
        -:  112:	{
        7:  113:	if(length>50 || length<5)
branch  0 taken 7 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 7
    #####:  114:		throw address;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:  115:	}
    =====:  116:	catch(string a)
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
        -:  117:	{
    =====:  118:		cout<<"Address should be more than 5 characters and less than 50 characters."<<endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    =====:  119:		return false;
call    0 never executed
        -:  120:
        -:  121:	}
        -:  122:
        7:  123:		return true;
        -:  124:
        -:  125:}
        -:  126:
        -:  127:// age validation
function _Z14age_validationNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 7 returned 100% blocks executed 28%
        7:  128:bool age_validation(string age)
        -:  129:{
        -:  130:	try
        -:  131:	{
       21:  132:	for(int i=0;i<age.length();i++)
call    0 returned 21
branch  1 taken 14 (fallthrough)
branch  2 taken 7
        -:  133:	{
        -:  134:	
       14:  135:		if(isdigit(age[i])!=1)
call    0 returned 14
branch  1 taken 14 (fallthrough)
branch  2 taken 0 (throw)
branch  3 taken 0 (fallthrough)
branch  4 taken 14
    #####:  136:			throw age;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:  137:		}
        -:  138:	}
    =====:  139:		catch(string a)
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
        -:  140:		{
    =====:  141:			cout<<"Age should be only in digits."<<endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    =====:  142:			return false;
call    0 never executed
        -:  143:		}
        -:  144:	
        -:  145:			
        -:  146:          try
        -:  147:           {
       7*:  148:           if(stoi(age)>50 || stoi(age)<18)
call    0 returned 7
branch  1 taken 7 (fallthrough)
branch  2 taken 0 (throw)
branch  3 taken 7 (fallthrough)
branch  4 taken 0
call    5 returned 7
branch  6 taken 7 (fallthrough)
branch  7 taken 0 (throw)
branch  8 taken 0 (fallthrough)
branch  9 taken 7
branch 10 taken 0 (fallthrough)
branch 11 taken 7
    #####:  149:		   throw age;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:  150:	   }
    =====:  151:	  catch(string a)
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
        -:  152:	{
    =====:  153:		cout<<"Age should be between 18-50."<<endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    =====:  154:		return false;
call    0 never executed
        -:  155:	}
        -:  156:	
        7:  157:		return true;
        -:  158:}
        -:  159:
        -:  160:// blood group validation
function _Z22blood_group_validationNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 6 returned 100% blocks executed 19%
        6:  161:bool blood_group_validation(string ch)
        -:  162:{
        -:  163:	try
        -:  164:	{
        6:  165:		if(ch.length()!=1)
call    0 returned 6
branch  1 taken 0 (fallthrough)
branch  2 taken 6
    #####:  166:			throw ch;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:  167:	}
    =====:  168:	catch(string a)
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
        -:  169:	{
    =====:  170:		cout<<endl<<"Choice should be of only 1 digit.";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    =====:  171:		return false;
call    0 never executed
        -:  172:	}
        -:  173:	try
        -:  174:	{
        6:  175:		if(!isdigit(ch[0]))
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
branch  3 taken 0 (fallthrough)
branch  4 taken 6
    #####:  176:			throw ch;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:  177:	}
    =====:  178:	catch(string b)
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
        -:  179:	{
    =====:  180:		cout<<endl<<"Choice should be only digit.";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    =====:  181:		return false;
call    0 never executed
        -:  182:	}
        -:  183:	try
        -:  184:	{
       6*:  185:		if(stoi(ch)<1 || stoi(ch)>8)
call    0 returned 6
branch  1 taken 6 (fallthrough)
branch  2 taken 0 (throw)
branch  3 taken 6 (fallthrough)
branch  4 taken 0
call    5 returned 6
branch  6 taken 6 (fallthrough)
branch  7 taken 0 (throw)
branch  8 taken 0 (fallthrough)
branch  9 taken 6
branch 10 taken 0 (fallthrough)
branch 11 taken 6
        -:  186:		{
    #####:  187:			throw ch;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:  188:		}
        -:  189:	}
    =====:  190:	catch(string c)
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
        -:  191:	{
    =====:  192:		cout<<endl<<"Choice should be between 1-8";
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    =====:  193:		return false;
call    0 never executed
        -:  194:	}
        6:  195:	return true;
        -:  196:
        -:  197:}
        -:  198:
        -:  199://medical clearance validation
function _Z28medical_clearance_validationNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 3 returned 100% blocks executed 32%
        3:  200:bool medical_clearance_validation(string medical_clear)
        -:  201:
        -:  202:{
        -:  203:
        -:  204:	
        -:  205:	try
        -:  206:	{
       3*:  207:	if(medical_clear!="Y" && medical_clear!="y")
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0 (throw)
branch  3 taken 3 (fallthrough)
branch  4 taken 0
call    5 returned 3
branch  6 taken 3 (fallthrough)
branch  7 taken 0 (throw)
branch  8 taken 0 (fallthrough)
branch  9 taken 3
branch 10 taken 0 (fallthrough)
branch 11 taken 3
    #####:  208:		throw medical_clear;
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
call    4 never executed
call    5 never executed
        -:  209:	}
    =====:  210:	catch(string a)
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
call    4 never executed
branch  5 never executed
branch  6 never executed
call    7 never executed
call    8 never executed
        -:  211:	{
    =====:  212:		cout<<"You should enter  only Y/y for medical clearance"<<endl;
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
    =====:  213:		return false;
call    0 never executed
        -:  214:	}
        -:  215:	
        3:  216:		return true;
        -:  217:}
        -:  218:	    
